#*
 *   $Id$
 * 
 *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#

Note: lines not prefixed with [...] will be omitted in the final product.

Copyright notice added to all files:
[all] /*
[all]  *   Generated by blitz/templates/resouces/combined.vm
[all]  * 
[all]  *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
[all]  *   Use is subject to license terms supplied in LICENSE.txt
[all]  * 
[all]  */

[jav] package omero.model;
[jav] import  java.util.*;
[jav] import  ome.conditions.*;
[cpp] \\\#include <OMERO/common.h>

NON-ABSTRACT BLOCK: 

Since <>I files are concrete implementations, they
should only be generated for concrete classes.

#if(!$pojo.classModifiers.contains("abstract"))

VARIABLES:
#set($Pojo  = "${pojo.declarationName}")
#set($PojoI = "${Pojo}I")

DECLARATION BLOCK:

[jav] public class ${PojoI} extends ${Pojo} 
[jav]    implements ome.api.ModelBased {

[hdr] #ifndef ${PojoI.toUpperCase()}_H
[hdr] #define ${PojoI.toUpperCase()}_H
[hdr]
[hdr] namespace omero { 
[hdr]   namespace model {
[hdr]     class ${PojoI} : public ${Pojo} { 

[cpp] namespace omero { 
[cpp]   namespace model {

[hdr]     protected://------------------------------------------

INTERNAL METHODS:

[hdr]       void preGetter(std::string field);
[cpp]       void ${PojoI}::preGetter(std::string field)
[cpp]       { errorIfUnloaded();}
[jav]       protected void preGetter( String field )
[jav]       { errorIfUnloaded();}

[hdr]       void postGetter(std::string field);
[cpp]       void ${PojoI}::postGetter(std::string field) {}
[jav]       protected void postGetter( String field ) {}

[hdr]       void preSetter(std::string field);
[cpp]       void ${PojoI}::preSetter(std::string field)
[cpp]       { errorIfUnloaded();}
[jav]       protected void preSetter( String field, Object value )
[jav]       {errorIfUnloaded();}

[hdr]       void postSetter(std::string field);
[cpp]       void ${PojoI}::postSetter(std::string field) {}
[jav]       protected void postSetter( String field, Object value ) {}

[hdr]       void errorIfUnloaded();
[cpp]       void ${PojoI}::errorIfUnloaded()
[cpp]       {
[cpp]         if (! loaded ) throw "Object unloaded";
[cpp]       }
[jav]       protected void errorIfUnloaded()
[jav]       {
[jav]         if ( ! loaded ) throw new IllegalStateException("Object unloaded:"+this);
[jav]       }

[hdr]       void throwNullCollectionException(std::string propertyName);
[cpp]       void ${PojoI}::throwNullCollectionException(std::string propertyName)
[cpp]       {
[cpp]         throw 
[cpp]            "Error updating collection:" + propertyName +"\n"+
[cpp]            "Collection is currently null. This can be seen\n"+
[cpp]            "by testing \"sizeOf"+ propertyName +" < 0\". This implies\n"+
[cpp]            "that this collection was unloaded. Please refresh this object\n"+
[cpp]            "in order to update this collection.\n";
[cpp]       }
[jav]       protected void throwNullCollectionException(String propertyName)
[jav]       {
[jav]          throw new ApiUsageException(
[jav]            "Error updating collection:" + propertyName +"\n"+
[jav]            "Collection is currently null. This can be seen\n"+
[jav]            "by testing \"sizeOf"+ propertyName +" < 0\". This implies\n"+
[jav]            "that this collection was unloaded. Please refresh this object\n"+
[jav]            "in order to update this collection.\n"
[jav]            );
[jav]       }

DESTRUCTOR BLOCK:

[hdr]       virtual ~${PojoI}(); // protected as outlined in docs.
[cpp]     ${PojoI}::~${PojoI}() {}


[hdr]     public://---------------------------------------------


DEFAULT CONSTRUCTOR BLOCK:

[all]   /**
[all]    * Default no-args constructor which manages the proper "loaded"
[all]    * status of all {@link Collection}s by manually initializing them all
[all]    * to an empty {@link Collection} of the approrpriate type.
[all]    */

[jav]     public ${PojoI}() {
[hdr]     ${PojoI}();
[cpp]     ${PojoI}::${PojoI}() {
[cpp]         loaded = true;
[jav]         loaded = true;

#foreach( $property in $pojo.propertyClosureForFullConstructor())
#set(     $name = $pojo.getPropertyName($property))
#set(     $javaType = $c2j.getJavaTypeName($property,false))##generics
#set(     $seqName = "${Pojo}${name.substring(0,1).toUpperCase()}${name.substring(1,$name.length())}Seq" )## seqName copied from ice_defs.vm
#if(      $javaType.startsWith("java.util.Set") )

[jav]        set${name}(new java.util.HashSet());
[cpp]        set${name}($seqName());

#elseif(  $javaType.startsWith("java.util.List") )
 
[jav]        set${name}(new java.util.ArrayList());
[cpp]        set${name}($seqName());

#end
#end

[jav]    }
[cpp]    }

UNLOADED CONSTRUCTOR BLOCK:

[all]   /**
[all]    * Id constructor which allows for the using instances as pointers.
[all]    */
[jav]    public ${PojoI}(long id, boolean loaded) {
[jav]      this.id = new omero.RLong(false,id);
[jav]      this.loaded = loaded; 
[jav]    }
[hdr]    ${PojoI}(omero::RLongPtr idPtr, bool isLoaded = false);
[cpp]    ${PojoI}::${PojoI}(omero::RLongPtr idPtr, bool isLoaded) {
[cpp]      id = idPtr;
[cpp]      loaded = isLoaded; 
[cpp]    }

UNLOAD BLOCK:

[jav]    public void unload(Ice.Current c) {
[hdr]    virtual void unload(const Ice::Current& c);
[cpp]  void ${PojoI}::unload(const Ice::Current& c) {
[jav]      loaded = false;
[cpp]      loaded = false;
#foreach($property in $pojo.propertyClosureForFullConstructor())
#set( $field = "${property.name}")
#set( $seqName = "${Pojo}${field.substring(0,1).toUpperCase()}${field.substring(1,$field.length())}Seq" )## seqName copied from ice_defs.vm
#set( $name = $pojo.getPropertyName($property) )
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#if(!$clazz.identifierProperty.equals($property))
## IF JAVA_TYPE (see copy() method below)
#if( $javaType.startsWith("ome"))
#set( $javaType = "omero::model::${shortType}Ptr" )
#elseif( $javaType.startsWith("IObject"))
#set( $javaType = "omero::model::IObjectPtr")
#elseif( $javaType.startsWith("java.util.List"))
#set( $javaType = "$seqName" )
#set( $prefix = "${property.name} == 0 ? 0 /*FIXME*/ : " ) ## TODO or just null?
#set( $unloadedstmt = "if (${property.name} > 0) { ${property.Name}Loaded = true; } else { ${property.Name}Loaded = false; }" )
#elseif( $javaType.startsWith("java.util.Set"))
#set( $javaType = "$seqName" )
#set( $prefix = "${property.name} == 0 ? 0 /*FIXME*/ : " ) ## TODO or just null?
#set( $unloadedstmt = "if (${property.name} > 0) { ${property.Name}Loaded = true; } else { ${property.Name}Loaded = false; }" )
#elseif( $javaType.startsWith("java.lang.Boolean"))
#set( $javaType   = "omero::RBoolPtr" )
#elseif( $javaType.startsWith("java.lang.Integer"))
#set( $javaType   = "omero::RIntPtr" )
#elseif( $javaType.startsWith("java.lang.Long"))
#set( $javaType   = "omero::RLongPtr" )
#elseif( $javaType.startsWith("java.lang.Double"))
#set( $javaType   = "omero::RDoublePtr" )
#elseif( $javaType.startsWith("java.lang.Float"))
#set( $javaType   = "omero::RFloatPtr" )
#elseif( $javaType.startsWith("long")) ## for Permissions
#set( $javaType = "long" )
#elseif( $javaType.startsWith("java.sql.Timestamp")) ## for Event
#set( $javaType = "omero::RTimePtr" )
#elseif( $javaType.startsWith("java.lang.String")) ## for Event
#set( $javaType = "omero::RStringPtr" )
#else
ERROR ========> $property
#end##JAVA_TYPE
[jav]      set$name( null );
[cpp]      set$name( ($cppType) 0 );
#end##NON-ID
#end##FOREACH
[jav]    }
[cpp]    }

ACCESSORS BLOCK:

Copied from pojo/PropertyAccessors.vm.
These mappings are from HibernateTypes-->IceTypes

#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $open = " " )
#set( $close= " " )
#set( $prefix=" " )
#set( $suffix=" " )
#set( $unloadedJava=" " )
#set( $unloadedCpp=" " )
#set( $PropertyName = $pojo.beanCapitalize( $property.name ) )
#set( $elementType = $c2j.getJavaTypeName($property,true).replaceFirst(".*<","").replaceFirst(">.*",""))
#set( $elementName = $c2j.unqualify( $elementType ) )
#set( $field = $property.name )
#set( $FIELD = ${field.toUpperCase()} )
#set( $seqName = "${Pojo}${name.substring(0,1).toUpperCase()}${name.substring(1,$name.length())}Seq" )## seqName copied from ice_defs.vm
#set( $propLoaded = "${property.Name}Loaded" )

JAVA_TYPE (see copy() method below)
#if( $javaType.startsWith("ome"))
#set( $javaType = "omero.model.${shortType}" )
#set( $getter = "(omero.model.${shortType}) this.$property.name" )
#set( $setter = "${property.name}")
#set( $cppType = "omero::model::${shortType}Ptr" )

#elseif( $javaType.startsWith("IObject"))
#set( $javaType = "omero.model.IObject")
#set( $getter = "(omero.model.IObject) this.$property.name" )
#set( $setter = "${property.name}")
#set( $cppType = "omero::model::IObjectPtr")

#elseif( $javaType.startsWith("java.util.List"))
#set( $getter = "new java.util.ArrayList( ${property.name} == null ? new java.util.ArrayList() : this.$property.name ) " )
#set( $setter = "${property.name} == null ? new java.util.ArrayList() : $property.name " ) ## TODO or just null?
#set( $unloadedJava = "if (${property.name} == null) { this.${propLoaded} = false; } else { this.${propLoaded} = true; }" )
#set( $cppType = "$seqName" )
#set( $unloadedCpp = "if (_${property.name} > ($cppType) 0) { ${propLoaded} = true; } else { ${propLoaded} = false; }" )

#elseif( $javaType.startsWith("java.util.Set"))
#set( $getter = "new java.util.HashSet( ${property.name} == null ? new java.util.ArrayList() : this.$property.name )" )
#set( $setter = "${property.name} == null ? new java.util.ArrayList() : new java.util.ArrayList( $property.name ) " ) ## TODO or just null?
#set( $unloadedJava = "if (${property.name} == null) { this.${propLoaded} = false; } else { this.${propLoaded} = true; }" )
#set( $cppType = "$seqName" )
#set( $unloadedCpp = "if (_${property.name} > ($cppType) 0) { ${propLoaded} = true; } else { ${propLoaded} = false; }" )

#elseif( $javaType.startsWith("java.lang.Boolean"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RBool(true,false) : new omero.RBool(false,${property.name}) ")
#set( $cppType   = "omero::RBoolPtr" )

#elseif( $javaType.startsWith("java.lang.Integer"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RInt(true,0) : new omero.RInt(false,${property.name}) ")
#set( $cppType   = "omero::RIntPtr" )

#elseif( $javaType.startsWith("java.lang.Long"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RLong(true,0L) : new omero.RLong(false,${property.name}) ")
#set( $cppType   = "omero::RLongPtr" )

#elseif( $javaType.startsWith("java.lang.Double"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RDouble(true,0.0) : new omero.RDouble(false,${property.name}) ")
#set( $cppType   = "omero::RDoublePtr" )

#elseif( $javaType.startsWith("java.lang.Float"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RFloat(true,0f) : new omero.RFloat(false,${property.name}) ")
#set( $cppType   = "omero::RFloatPtr" )

#elseif( $javaType.startsWith("long")) ## for Permissions
#set( $javaType = "Long" )
#set( $getter   = "new Long(this.$property.name)" )
#set( $setter = "(${property.name} == null) ? 0 : this.$property.name == ${property.name}.longValue()")
#set( $cppType = "long" )

#elseif( $javaType.startsWith("java.sql.Timestamp")) ## for Event
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : new java.sql.Timestamp( ${property.name}.val.val )" )
#set( $setter = "${property.name} == null ? new omero.RTime(true,null) : new omero.RTime(false,new omero.Time(${property.name}.getTime()))");
#set( $cppType = "omero::RTimePtr" )

#elseif( $javaType.startsWith("java.lang.String")) ## for Event
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RString(true,null) : new omero.RString(false,${property.name}) ")
#set( $cppType = "omero::RStringPtr" )

#else
[all]...ERROR...$javaType unknown.

#end##JAVA_TYPE

ASSOCIATION TYPES BLOCK:

#set( $hasSet  = $c2j.hasMetaAttribute($property, "set-add-method"))
#set( $hasLink = $c2j.hasMetaAttribute($property, "link-add-method") )

Original accessors: will have their visibility reduced if
the special set methods are added.

#set( $access = "protected" )
#if( !$hasSet && !$hasLink)
#set( $access = "public" )
#end

[jav]    $access $javaType $pojo.getGetterSignature($property)() {
[jav]        errorIfUnloaded();
[jav]        return $getter;
[jav]    }
[jav]    
[jav]    $access void set$name($javaType $property.Name) {
[jav]        errorIfUnloaded();
[jav]        this.$property.Name = $setter;
[jav]        $unloadedJava
[jav]    }

[hdr]  $access:
[hdr]    $cppType $pojo.getGetterSignature($property)();
[hdr]    void set$name($cppType _$property.Name);
[hdr]  public:

[cpp]    $cppType ${PojoI}::$pojo.getGetterSignature($property)() {
[cpp]        errorIfUnloaded();
[cpp]        return ${open}${property.name}${close};
[cpp]    }
[cpp]    
[cpp]    void ${PojoI}::set$name($cppType _$property.Name) {
[cpp]        errorIfUnloaded();
[cpp]        $property.Name = $!{prefix}_${property.Name}$!{suffix};
[cpp]        $unloadedCpp
[cpp]    }

One-to-many extras:

#if( $hasSet || $hasLink )

[jav]    public int sizeOf${PropertyName}() {
[jav]      errorIfUnloaded();
[jav]      return ${propLoaded} ? ${property.name}.size() : -1;
[jav]    }
[hdr]    int sizeOf${PropertyName}();
[cpp]    int ${PojoI}::sizeOf${PropertyName}() {
[cpp]      errorIfUnloaded();
[cpp]      return ${propLoaded} ? ${property.name}.size() : -1;
[cpp]    }

[jav]    public Iterator iterate${PropertyName}(){
[jav]      errorIfUnloaded();
[jav]      if (!${propLoaded}) {
[jav]        throwNullCollectionException("${property.name}");
[jav]      }
[jav]      return get${PropertyName}().iterator();
[jav]    }
[hdr]    // TODO c++ iterator (may have to be set<or>list specific)

[jav]    public List<$javaType> copy${PropertyName}() {
[jav]      errorIfUnloaded();
[jav]      if (!${propLoaded}) throwNullCollectionException("${property.name}");
[jav]      List<$javaType> result = new ArrayList(${property.name});
[jav]      return result;
[jav]    }

         Here we don't have a vector<$cppType> since the type is typedef'd
[hdr]    $cppType copy${PropertyName}();
[cpp]    $cppType ${PojoI}::copy${PropertyName}(){
[cpp]      errorIfUnloaded();
[cpp]      if (!${propLoaded}) throwNullCollectionException("${property.name}");
[cpp]      $cppType result(${property.name}.size());
[cpp]      std::copy(${property.name}.begin(), ${property.name}.end(), result.begin());
[cpp]      return result;
[cpp]    }

#end


[all] // Because of the ice inheritance hierarchy, we must use direct
[all] // field access on several methods below.


Set modifications:

#if( $hasSet )
#set( $inverse = $c2j.getMetaAsString($property, "set-add-method"))
#set( $Inverse = $pojo.beanCapitalize( $inverse) )

[jav]    public void add${elementName}(${elementName} target) {
[jav]      errorIfUnloaded();
[jav]      if (!${propLoaded}) throwNullCollectionException("${name}");
[jav]      get${PropertyName}().add( target );
[jav]      target.$inverse = this;
[jav]    }
[hdr]    void add${elementName}(${elementName}Ptr target);
[cpp]    void ${PojoI}::add${elementName}(${elementName}Ptr target) {
[cpp]      errorIfUnloaded();
[cpp]      if (!${propLoaded}) throwNullCollectionException("${name}");
[cpp]      get${PropertyName}().push_back( target );
[cpp]      target->$inverse = this;
[cpp]    }

[jav]    public void add${elementName}Set(Collection<${elementName}> targets) {
[jav]      errorIfUnloaded();
[jav]      if (!${propLoaded}) throwNullCollectionException("${name}");
[jav]      get${PropertyName}().addAll( targets );
[jav]      for( ${elementName} target : targets) {
[jav]        target.$inverse = this;
[jav]      }
[jav]    }
[hdr]    void add${elementName}Set($cppType targets);
[cpp]    void ${PojoI}::add${elementName}Set($cppType targets) {
[cpp]      errorIfUnloaded();
[cpp]      if (!${propLoaded}) throwNullCollectionException("${name}");
[cpp]      $cppType::iterator loc = get${PropertyName}().end();
[cpp]      $cppType::iterator beg = targets.begin(); 
[cpp]      $cppType::iterator end = targets.end(); 
[cpp]      get${PropertyName}().insert(loc,beg,end);
[cpp]      for ($cppType::iterator it = targets.begin(); it != targets.end(); ++it) {
[cpp]        ${elementName}Ptr target = *it;
[cpp]        target->$inverse = this;
[cpp]      } 
[cpp]    }

#end

#end##FOREACH


COPYOBJECT BLOCK:

[jav]    public void copyObject(ome.util.Filterable model, ome.util.ModelMapper _mapper) {
[jav]         omero.util.IceMapper mapper = (omero.util.IceMapper) _mapper;
[jav]         if (model instanceof $pojo.qualifiedDeclarationName){
[jav]             $pojo.qualifiedDeclarationName source = ($pojo.qualifiedDeclarationName) model;
[jav]             this.loaded = source.isLoaded();

#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $method = "source.get$name()" )
#set( $guard  = "if (this.loaded) " )
#if($clazz.identifierProperty.equals($property))
#set( $guard  = "" )
#end

#if( $pojo.qualifiedDeclarationName.startsWith("ome.model.internal.Permissions") )
#set( $javaType = "Long" )
#set( $method = "ome.util.Utils.internalForm(source)" )
#elseif( $javaType.startsWith("ome") )
#set( $javaType = "omero.model.${shortType}" )
#elseif( $javaType.startsWith("IObject") )
#set( $javaType = "omero.model.IObject" )
#elseif( $javaType.startsWith("long"))
#set( $javaType = "Long")
#elseif( $javaType.startsWith("java.util.Set") || $javaType.startsWith("java.util.List") )
## If this is the case, we can't use the accessor and have to use a generated method
#set( $method = "source.retrieve(${pojo.qualifiedDeclarationName}.${name.toUpperCase()})" )
#end

[jav]              $guard this.set$name(($javaType) mapper.findTarget($method));

#end

[jav]     } else {
[jav]              throw new IllegalArgumentException(
[jav]                "${pojo.declarationName} cannot copy from " + 
[jav]                (model==null ? "null" : model.getClass().getName()));
[jav]     }
[jav]     }

FILLOBJECT BLOCK:

[jav]     public ome.util.Filterable fillObject(ome.util.ReverseModelMapper _mapper) {
[jav]         omero.util.IceMapper mapper = (omero.util.IceMapper) _mapper;
[jav]         $pojo.qualifiedDeclarationName target = new ${pojo.qualifiedDeclarationName}();
[jav]         mapper.store(this, target);
[jav]         if (!this.loaded) {
[jav]           target.setId( id == null ? null : id._null ? null : id.val );
[jav]           target.unload();
[jav]         } else {

#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $FIELD = "${pojo.qualifiedDeclarationName}.${name.toUpperCase()}" )
#set( $propLoaded = "${property.Name}Loaded" )

#if( $pojo.qualifiedDeclarationName.startsWith("ome.model.internal.Permissions") )
[jav]           target = ome.util.Utils.toPermissions((Long)this.getPerm1());

#elseif( $javaType.startsWith("ome") )
[jav]           target.putAt($FIELD, ($javaType) mapper.reverse( (ome.api.ModelBased) this.get$name() ) );

#elseif( $javaType.startsWith("IObject") )
[jav]           target.set$name( (ome.model.IObject) mapper.reverse( (ome.api.ModelBased) this.get$name() ) );

#elseif( $javaType.startsWith("java.util.Set") || $javaType.startsWith("java.util.List") )
## If this is the case, we can't use the accessor and have to use a generated method

[jav]           if (this.${propLoaded}) {
[jav]             target.putAt( $FIELD, mapper.reverse( this.get$name() ) );
[jav]           } else {
[jav]             target.putAt( $FIELD, null );
[jav]           }

#elseif( $javaType.startsWith("long"))
 ----------------> ERROR
#else
                target.set$name( this.get$name() );
#end
#end

[jav]       }
[jav]             return target;
[jav]     }


END DECLARATION BLOCK:

[hdr]  };
[hdr]  typedef IceUtil::Handle<${PojoI}> ${PojoI}Ptr;
[jav] }
[cpp]}}
[hdr]}}
[hdr] #endif // ${PojoI.toUpperCase()}_H

NON-ABSTRACT BlOCK:
#endif // ${pojo.declarationName.toUpperCase()}I_H
#end
#stop
