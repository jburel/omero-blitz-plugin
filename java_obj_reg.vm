#*
 *   $Id$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#
/*
 *   $$Id$$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 */

//
// ObjectFactory registrar generated by templates/java_objs_reg.vm
//

package omero.util;

public abstract class ObjectFactoryRegistrar {

  public static class Instance implements Ice.ObjectFactory {

    public Ice.Object create(String type) {
      return ObjectFactoryRegistrar.create(type);
    }

    public void destroy() {
      // does nothing.
    }

  }
    
  public final static Instance INSTANCE = new Instance();

  public static void conditionalAdd(String name, Ice.Communicator ic, Ice.ObjectFactory _factory) {

    if (null==ic.findObjectFactory(name)) {
      ic.addObjectFactory(_factory, name);
    }

  }

  /**
   *
   */
  public static void registerObjectFactory(Ice.Communicator ic, Ice.ObjectFactory _factory) {
    conditionalAdd("::omero::model::Permissions", ic, _factory);
    conditionalAdd("::omero::model::Details", ic, _factory);
#foreach($type in $types)
#if(!$type.abstract)
    conditionalAdd("::omero::model::${type.shortname}", ic,  _factory);
#end
#end
  }

  /**
   *
   */
  public static Ice.Object create(String type) {
    if (null==type) {
      throw new IllegalArgumentException("Type argument is required.");
    } else if (type.equals("::omero::model::Permissions")) {
        return new omero.model.PermissionsI();  
    } else if (type.equals("::omero::model::Details")) {
        return new omero.model.DetailsI();  
#foreach($type in $types)
#if(!$type.abstract)
    } else if (type.equals("::omero::model::${type.shortname}")) {
      return new omero.model.${type.shortname}I();
#end
#end
    } else {
      throw new IllegalArgumentException(type + " is an unknown type.");
    }
  }

}

#stop
