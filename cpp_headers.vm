#*
 *   $Id$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#
/*
 *   \$Id\$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 */



// Generated by templates/cpp_objects.vm

#if(!$pojo.classModifiers.contains("abstract")) ####################### ONLY IF NOT ABSTRACT

\\\#include <Ice/Config.h>
\\\#include <iostream>
\\\#include <string>
\\\#include <vector>

#ifndef ${pojo.declarationName.toUpperCase()}I_H
#define ${pojo.declarationName.toUpperCase()}I_H

namespace omero { namespace model {

class ${pojo.declarationName}I : public $pojo.declarationName { 

protected:
    virtual ~${pojo.declarationName}I(); // protected as outlined in docs.

public:

   /**
    * Default no-args constructor which manages the proper "loaded"
    * status of all {@link Collection}s by manually initializing them all
    * to an empty {@link Collection} of the approrpriate type.
    */
    ${pojo.declarationName}I();
    ${pojo.declarationName}I(omero::RLongPtr idPtr, bool isLoaded = false);
    virtual void unload(const Ice::Current& c);

##
## Copied from pojo/PropertyAccessors.vm
##
##  These mappings are from HibernateTypes-->IceTypes
##  Ice doesn't use getters/setters. So we're bastardizing them
##  for our efforts.
##
#foreach($property in $pojo.propertyClosureForFullConstructor())
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $open = " " )
#set( $close= " " )
#set( $prefix=" " )
#set( $suffix=" " )
#set( $unloadedstmt=" " )
#set( $seqName = "${pojo.declarationName}${name.substring(0,1).toUpperCase()}${name.substring(1,$name.length())}Seq" )## seqName copied from ice_defs.vm
##
## IF JAVA_TYPE (see copy() method below)
#if( $javaType.startsWith("ome"))
#set( $javaType = "omero::model::${shortType}Ptr" )
#elseif( $javaType.startsWith("IObject"))
#set( $javaType = "omero::model::IObjectPtr")
#elseif( $javaType.startsWith("java.util.List"))
#set( $javaType = "$seqName" )
#set( $unloadedstmt = "if (_${property.name} > ($javaType) 0) { ${property.Name}Loaded = true; } else { ${property.Name}Loaded = false; }" )
#elseif( $javaType.startsWith("java.util.Set"))
#set( $javaType = "$seqName" )
#set( $unloadedstmt = "if (_${property.name} > ($javaType) 0) { ${property.Name}Loaded = true; } else { ${property.Name}Loaded = false; }" )
#elseif( $javaType.startsWith("java.lang.Boolean"))
#set( $javaType   = "omero::RBoolPtr" )
#elseif( $javaType.startsWith("java.lang.Integer"))
#set( $javaType   = "omero::RIntPtr" )
#elseif( $javaType.startsWith("java.lang.Long"))
#set( $javaType   = "omero::RLongPtr" )
#elseif( $javaType.startsWith("java.lang.Double"))
#set( $javaType   = "omero::RDoublePtr" )
#elseif( $javaType.startsWith("java.lang.Float"))
#set( $javaType   = "omero::RFloatPtr" )
#elseif( $javaType.startsWith("long")) ## for Permissions
#set( $javaType = "long" )
#elseif( $javaType.startsWith("java.sql.Timestamp")) ## for Event
#set( $javaType = "omero::RTimePtr" )
#elseif( $javaType.startsWith("java.lang.String")) ## for Event
#set( $javaType = "omero::RStringPtr" )
#end ##END JAVA_TYPE

    $javaType $pojo.getGetterSignature($property)() {
        return ${open}${property.name}${close};
    }
    
    void set$name($javaType _$property.Name) {
        $property.Name = $!{prefix}_${property.Name}$!{suffix};
        $unloadedstmt
    }
#end ##END FOREACH

  };

  typedef IceUtil::Handle<${pojo.declarationName}I> ${pojo.declarationName}IPtr;

 }
}
#endif // ${pojo.declarationName.toUpperCase()}I_H
#end############################################################## ONLY IF NOT ABSTRACT
#stop
 