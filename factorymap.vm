#*
 *   $Id$
 * 
 *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#

Note: lines not prefixed with [...] will be omitted in the final product.

Copyright notice added to all files:
[pyc] """
[all] /*
[all]  *   Generated by blitz/templates/resouces/objectfactory.vm
[all]  *
[all]  *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
[all]  *   Use is subject to license terms supplied in LICENSE.txt
[all]  *
[all]  */
[pyc] """

#set( $p = "::omero::model::Permissions")
#set( $d = "::omero::model::Details")

[jav] package omero.util;
[jav] import java.util.Map;
[jav] import java.util.concurrent.Callable;
[cpp] \#include <string>
[cpp] \#include <map>
[cpp] namespace omero {

[jav] public abstract class FactoryMap {
[jav]
[jav]     public static Map<String,Callable<Ice.Object>> map() {
[jav]         Map<String,Callable<Ice.Object>> __m = new HashMap<String,Callable<Ice.Object>();
[jav]         __m.put("$p",omero.model.PermissionsI.generator());
[jav]         __m.put("$d",omero.model.DetailsI.generator());

[pyc] def map():
[pyc]         import omero.model, omero_model_PermissionsI, omero_model_DetailsI
[pyc]         __m = {}
[pyc]         __m["$p"] = omero.model.PermissionsI.generator()
[pyc]         __m["$d"] = omero.model.DetailsI.generator()

[cpp] map<string,Ice::Object> map() {
[cpp]         map<string,Ice::Object> __m;
[cpp]         __m["$p"] = omero::model::PermissionsI::generator();
[cpp]         __m["$d"] = omero::model::DetailsI::generator();

#foreach($type in $types)
#if(!$type.abstract)
[pyc]         import omero_model_${type.shortname}I
[jav]         __m.put("::omero::model::${type.shortname}", omero::model::${type.shortname}I::generator());
[pyc]         __m["::omero::model::${type.shortname}"] = omero.model.${type.shortname}I.generator()
[cpp]         __m["::omero::model::${type.shortname}"] = omero::model::${type.shortname}I::generator();
#end
#end

[pyc]         return __m
[jav]         return __m;
[cpp]         return __m;
[jav]     }
[cpp]     }

[jav] }
[cpp] } // End omero
#stop
