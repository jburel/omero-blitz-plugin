#*
 *   $Id$
 * 
 *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#

Note: lines not prefixed with [...] will be omitted in the final product.

Copyright notice added to all files:
[pyc] """
[all] /*
[all]  *   Generated by blitz/templates/resouces/objectfactory.vm
[all]  * 
[all]  *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
[all]  *   Use is subject to license terms supplied in LICENSE.txt
[all]  * 
[all]  */
[pyc] """

#set( $p = "::omero::model::Permissions")

[jav] package omero.util;
[jav] import java.util.Map;
[jav] import java.util.concurrent.Callable;
[cpp] \\\#include <string>
[cpp] \\\#include <map>
[cpp] namespace OMERO {

[jav] public abstract class FactoryMap {
[jav]
[jav]     public static Map<String,Callable<Ice.Object>> map() {
[jav]         Map<String,Callable<Ice.Object>> __m = new HashMap<String,Callable<Ice.Object>();
[jav]         __m.put("$p",omero.model.PermissionsI.generator());

[pyc] def map():
[pyc]         import omero.model, omero_model_PermissionsI
[pyc]         __m = {"$p":omero.model.PermissionsI.generator()}

[cpp] map<string,Ice::Object> map() {
[cpp]         map<string,Ice::Object> __m;
[cpp]         __m["$p"] = omero::model::PermissionsI::generator();

#foreach($pojo in $c2j.getPOJOIterator( $cfg.getClassMappings() ))
#if(!$pojo.classModifiers.contains("abstract"))
[pyc]         import omero_model_${pojo.declarationName}I
[jav]         __m.put("::omero::model::${pojo.declarationName}I", omero::model::${pojo.declarationName}I::generator());
[pyc]         __m["::omero::model::${pojo.declarationName}I"] = omero.model.${pojo.declarationName}I.generator()
[cpp]         __m["::omero::model::${pojo.declarationName}I"] = omero::model::${pojo.declarationName}I::generator();
#end
#foreach($property in $pojo.allPropertiesIterator)
#if($c2j.isComponent($property))
#set($component = $c2j.getPOJOClass($property.getValue()))
#if(!$component.classModifiers.contains("abstract"))
[pyc]         import omero_model_${component.declarationName}I
[jav]         __m.put("::omero::model::${component.declarationName}I", omero::model::${component.declarationName}I::generator());
[pyc]         __m["::omero::model::${component.declarationName}I"] = omero.model.${component.declarationName}I.generator()
[cpp]         __m["::omero::model::${component.declarationName}I"] = omero::model::${component.declarationName}I::generator();
#end
#end
#end
#end

[pyc]         return __m
[jav]         return __m;
[cpp]         return __m;
[jav]     }
[cpp]     }

[jav] }
[cpp] } // End OMERO
#stop
