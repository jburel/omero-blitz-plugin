package org.openmicroscopy.blitz

import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.DependencySet
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.api.logging.Logging
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.SourceSet

class BlitzPlugin implements Plugin<Project> {

    private static final def Log = Logging.getLogger(BlitzPlugin)

    @Override
    void apply(Project project) {
        // Apply the base blitz plugin
        project.plugins.apply(BlitzPluginBase)

        configureDefaultCombinedDir(project)
        configureImportMappingsTask(project)
        configureForJavaPlugin(project)
    }

    void configureDefaultCombinedDir(Project project) {
        // Set a default for .combined file output
        project.blitz.combinedDir = "${project.buildDir}/combined"
    }

    /**
     * Creates task to extract .ome.xml files from omero-model
     * and place them in {@code omeXmlDir}
     * @param project
     * @return
     */
    void configureImportMappingsTask(Project project) {
        // Set default extension values
        final def omeXmlFilesDir = "${project.buildDir}/extracted"
        final def includePatterns = "**/*.ome.xml"

        // Set BlitzExtension.omeXmlFiles to default to where extract .ome.xml files will go
        project.blitz.omeXmlFiles = project.fileTree(dir: "${project.buildDir}/extracted", include: "**/*.ome.xml")

        // Register the importOmeXmlTask
        project.tasks.register("importOmeXmlTask", Copy) { t ->
            t.group = BlitzPluginBase.GROUP
            t.description = "Extracts mapping files from omero-model jar"
        }

        // After project configurations have been evaluated, we look for or add omero-model.jar
        project.afterEvaluate {
            def omeroModelArtifact = getOmeroModelArtifact(project)
            if (!omeroModelArtifact) {
                throw new GradleException('Can\'t find omero-model artifact')
            }

            // Register extract ome.xml from omero-model task
            project.tasks.named("importOmeXmlTask").configure { t ->
                t.from project.zipTree(omeroModelArtifact.file)
                t.into omeXmlFilesDir
                t.include includePatterns
                t.includeEmptyDirs = false
            }

            // Configure generateCombinedFiles task to depend on importOmeXmlTask
            project.tasks.named('generateCombinedFiles').configure { t ->
                if (project.blitz.omeXmlFiles.isEmpty()) {
                    t.dependsOn project.tasks.named("importOmeXmlTask")
                }
            }
        }
    }

    void configureForJavaPlugin(Project project) {
        // Set default dir for files generated by .combined files
        project.blitz.outputDir = "src/main/generated"

        // Configure default outputDir
        project.plugins.withType(JavaPlugin) { JavaPlugin java ->
            JavaPluginConvention javaConvention =
                    project.convention.getPlugin(JavaPluginConvention)

            SourceSet main =
                    javaConvention.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)

            main.java.srcDirs.add("${project.blitz.outputDir}/java")
            main.resources.srcDirs("${project.blitz.outputDir}/resources")
        }
    }

    private def getOmeroModelArtifact(Project project) {
        def artifact = getOmeroModelFromCompileConfig(project)
        if (artifact) {
            Log.info("omero-model found as a dependency")
            return artifact
        } else {
            Log.info("Adding omero-model as a dependency to obtain ome.xml files")
            return getOmeroModelWithCustomConfig(project)
        }
    }

    private ResolvedArtifact getOmeroModelFromCompileConfig(Project project) {
        def resolvableConfigs = project.configurations.findAll { it.canBeResolved }
        def artifact = null
        for (config in resolvableConfigs) {
            artifact = config.resolvedConfiguration.resolvedArtifacts.find { item ->
                item.name.contains("omero-model")
            }
            if (artifact) {
                break
            }
        }
        return artifact
    }

    private ResolvedArtifact getOmeroModelWithCustomConfig(Project project) {
        final def hiddenConfigName = 'omeXmlFiles'

        def config = project.configurations.findByName(hiddenConfigName)
        if (!config) {
            config = project.configurations.create(hiddenConfigName)
                    .setVisible(false)
                    .setDescription("The data artifacts to be processed for this plugin.");
        }

        def omeroModelVersion = project.properties['omeroModelVersion'] ?: "5.5.0-SNAPSHOT"

        if (config.dependencies.empty) {
            config.defaultDependencies { DependencySet dependencies ->
                dependencies.add project.dependencies.create("org.openmicroscopy:omero-model:${omeroModelVersion}")
            }
        }

        return config.resolvedConfiguration
                .resolvedArtifacts
                .find { item -> item.name.contains("omero-model") }
    }

}

