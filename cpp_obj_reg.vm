#*
 *   $Id$
 *
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 *#
/*
 *   $$Id$$
 *
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 */

//
// ObjectFactory registrar generated by templates/cpp_objs_reg.vm
//

\#include <omero/ObjectFactoryRegistrar.h>
#foreach($type in $types)
#if(!$type.abstract)
\#include <omero/model/${type.shortname}I.h>
#end
#end

namespace omero {

    ObjectFactory::ObjectFactory() : Ice::ObjectFactory() {}

    ObjectFactory::~ObjectFactory() {}

    Ice::ObjectPtr ObjectFactory::create(const std::string& type) {
    if (0==type.compare("::omero::model::Permissions")) {
        return new omero::model::PermissionsI();
    }
    if (0==type.compare("::omero::model::Details")) {
        return new omero::model::DetailsI();
    }
#foreach($type in $types)
#if(!$type.abstract)
    if (0==type.compare("::omero::model::${type.shortname}")) {
      return new omero::model::${type.shortname}I();
    }
#end
#end
    throw "Unknown type" + type;

  }

  void ObjectFactory::destroy() {}

  void ObjectFactory::conditionalAdd(const std::string& name, const Ice::CommunicatorPtr& ic, const Ice::ObjectFactoryPtr& of) {

    if (0==ic->findObjectFactory(name)) {
      ic->addObjectFactory(of, name);
    }

  }

  void ObjectFactory::registerObjectFactory(const Ice::CommunicatorPtr ic) {
    Ice::ObjectFactoryPtr _factory = this;
    conditionalAdd("::omero::model::Permissions", ic, _factory);
    conditionalAdd("::omero::model::Details", ic, _factory);
#foreach($type in $types)
#if(!$type.abstract)
    conditionalAdd("::omero::model::${type.shortname}", ic,  _factory);
#end
#end
  }

} // End omero
#stop
