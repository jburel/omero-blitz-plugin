#*
 *   $Id$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#
/*
 *   $$Id$$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 */

//
// ObjectFactory registrar generated by templates/cpp_objs_reg.vm
//

\\\#include <OMERO/Model.h>
\\\#include <string>

namespace OMERO {

    ObjectFactory::ObjectFactory() : Ice::ObjectFactory() {}

    ObjectFactory::~ObjectFactory() {}

    Ice::ObjectPtr ObjectFactory::create(const std::string& type) {
    if (0==type.compare("::omero::model::Permissions")) {
        return new omero::model::PermissionsI();  
#foreach($pojo in $c2j.getPOJOIterator( $cfg.getClassMappings() ))
#if(!$pojo.classModifiers.contains("abstract"))
    } else if (0==type.compare("::omero::model::${pojo.declarationName}")) {
      return new omero::model::${pojo.declarationName}I();
#end
#foreach($property in $pojo.allPropertiesIterator)
#if($c2j.isComponent($property))
#set($component = $c2j.getPOJOClass($property.getValue()))
#if(!$component.classModifiers.contains("abstract"))
    } else if (0==type.compare("::omero::model::${component.declarationName}")) {
      return new omero::model::${component.declarationName}I();
#end
#end
#end
#end
    } else {
      throw "Unknown type" + type;
    }
  }

  void ObjectFactory::destroy() {}

  void ObjectFactory::conditionalAdd(const std::string& name, Ice::CommunicatorPtr ic, const Ice::ObjectFactoryPtr of) {

    if (0==ic->findObjectFactory(name)) {
      ic->addObjectFactory(of, name);
    }

  }

  void ObjectFactory::registerObjectFactory(const Ice::CommunicatorPtr ic) {
    Ice::ObjectFactoryPtr _factory = this;
    conditionalAdd("::omero::model::Permissions", ic, _factory);
#foreach($pojo in $c2j.getPOJOIterator( $cfg.getClassMappings() ))
#if(!$pojo.classModifiers.contains("abstract"))
    conditionalAdd("::omero::model::${pojo.declarationName}", ic,  _factory);
#end
#foreach($property in $pojo.allPropertiesIterator)
#if($c2j.isComponent($property))
#set($component = $c2j.getPOJOClass($property.getValue()))
#if(!$pojo.classModifiers.contains("abstract"))
    conditionalAdd("::omero::model::${component.declarationName}", ic, _factory);
#end
#end
#end
#end
  }

} // End OMERO
#stop
