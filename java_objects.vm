#*
 *   $Id$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#
/*
 *   \$Id\$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 */

package omero.model;

// Generated by templates/java_objects.vm

#if(!$pojo.classModifiers.contains("abstract")) ####################### ONLY IF NOT ABSTRACT

public class ${pojo.declarationName}I 
   extends $pojo.declarationName 
   implements ome.api.ModelBased 

{ 

   /**
    * Default no-args constructor which manages the proper "loaded"
    * status of all {@link Collection}s by manually initializing them all
    * to an empty {@link Collection} of the approrpriate type.
    */
    public ${pojo.declarationName}I() {
        this.loaded = true;
########################################################
#foreach( $property in $pojo.propertyClosureForFullConstructor)
#set(     $name = $pojo.getPropertyName($property))
#set(     $javaType = $c2j.getJavaTypeName($property,false))##generics
#if(      $javaType.startsWith("java.util.Set") )
##
        this.set${name}(new java.util.HashSet());
##
#elseif(  $javaType.startsWith("java.util.List") )
## 
        this.set${name}(new java.util.ArrayList());
##
#end
#end
########################################################
    }

  public ${pojo.declarationName}I(long id, boolean loaded) {
    this.id = new omero.RLong(false,id);
    this.loaded = loaded; 
  }

##
## Copied from pojo/PropertyAccessors.vm
##
##  These mappings are from HibernateTypes-->IceTypes
##  Ice doesn't use getters/setters. So we're bastardizing them
##  for our efforts.
##
#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $unloadedstmt=" " )
##
## IF JAVA_TYPE (see copy() method below)
#if( $javaType.startsWith("ome"))
#set( $javaType = "omero.model.${shortType}" )
#set( $getter = "(omero.model.${shortType}) this.$property.name" )
#set( $setter = "${property.name}")
##
#elseif( $javaType.startsWith("IObject"))
#set( $javaType = "omero.model.IObject")
#set( $getter = "(omero.model.IObject) this.$property.name" )
#set( $setter = "${property.name}")
##
#elseif( $javaType.startsWith("java.util.List"))
#set( $getter = "new java.util.ArrayList( ${property.name} == null ? new java.util.ArrayList() : this.$property.name ) " )
#set( $setter = "${property.name} == null ? new java.util.ArrayList() : $property.name " ) ## TODO or just null?
#set( $unloadedstmt = "if (${property.name} == null) { this.${property.Name}Loaded = false; } else { this.${property.Name}Loaded = true; }" )
##
#elseif( $javaType.startsWith("java.util.Set"))
#set( $getter = "new java.util.HashSet( ${property.name} == null ? new java.util.ArrayList() : this.$property.name )" )
#set( $setter = "${property.name} == null ? new java.util.ArrayList() : new java.util.ArrayList( $property.name ) " ) ## TODO or just null?
#set( $unloadedstmt = "if (${property.name} == null) { this.${property.Name}Loaded = false; } else { this.${property.Name}Loaded = true; }" )
##
#elseif( $javaType.startsWith("java.lang.Boolean"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RBool(true,false) : new omero.RBool(false,${property.name}) ")
##
#elseif( $javaType.startsWith("java.lang.Integer"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RInt(true,0) : new omero.RInt(false,${property.name}) ")
##
#elseif( $javaType.startsWith("java.lang.Long"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RLong(true,0L) : new omero.RLong(false,${property.name}) ")
##
#elseif( $javaType.startsWith("java.lang.Double"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RDouble(true,0.0) : new omero.RDouble(false,${property.name}) ")
##
#elseif( $javaType.startsWith("java.lang.Float"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RFloat(true,0f) : new omero.RFloat(false,${property.name}) ")
##
#elseif( $javaType.startsWith("java.lang.String"))
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : ${property.name}.val" )
#set( $setter = "${property.name} == null ? new omero.RString(true,null) : new omero.RString(false,${property.name}) ")
##
#elseif( $javaType.startsWith("long")) ## for Permissions
#set( $javaType = "Long" )
#set( $getter   = "new Long(this.$property.name" )
#set( $setter = "${property.name} == null ? 0 : this.$property.name == ${property.name}.longValue()")
##
#elseif( $javaType.startsWith("java.sql.Timestamp")) ## for Event
#set( $getter = "${property.name} == null ? null : ${property.name}._null ? null : new java.sql.Timestamp( ${property.name}.val.val )" )
#set( $setter = "${property.name} == null ? new omero.RTime(true,null) : new omero.RTime(false,new omero.Time(${property.name}.getTime()))");
##
#end ##END JAVA_TYPE

    public $javaType $pojo.getGetterSignature($property)() {
        return $getter;
    }
    
    public void set$name($javaType $property.Name) {
        this.$property.Name = $setter;
        $unloadedstmt
    }
#end ##END FOREACH

    public void copyObject(ome.util.Filterable model, ome.util.ModelMapper _mapper) {
        omero.util.IceMapper mapper = (omero.util.IceMapper) _mapper;
        if (model instanceof $pojo.qualifiedDeclarationName){
            $pojo.qualifiedDeclarationName source = ($pojo.qualifiedDeclarationName) model;
            this.loaded = source.isLoaded();
###
### FOR PROPERTIES
###
#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $method = "source.get$name()" )
#set( $guard  = "if (this.loaded) " )
#if($clazz.identifierProperty.equals($property))
#set( $guard  = "" )
#end
## IF JAVA_TYPE -- mirrors above
#if( $pojo.qualifiedDeclarationName.startsWith("ome.model.internal.Permissions") )
#set( $javaType = "Long" )
#set( $method = "ome.util.Utils.internalForm(source)" )
#elseif( $javaType.startsWith("ome") )
#set( $javaType = "omero.model.${shortType}" )
#elseif( $javaType.startsWith("IObject") )
#set( $javaType = "omero.model.IObject" )
#elseif( $javaType.startsWith("long"))
#set( $javaType = "Long")
#elseif( $javaType.startsWith("java.util.Set") || $javaType.startsWith("java.util.List") )
## If this is the case, we can't use the accessor and have to use a generated method
#set( $method = "source.retrieve(${pojo.qualifiedDeclarationName}.${name.toUpperCase()})" )
#end
## END JAVA_TYPE
##
              $guard this.set$name(($javaType) mapper.findTarget($method));
#end
###
### END PROPERTIES
###
	  } else {
             throw new IllegalArgumentException(
               "${pojo.declarationName} cannot copy from " + 
               (model==null ? "null" : model.getClass().getName()));
	  }
    }


    public ome.util.Filterable fillObject(ome.util.ReverseModelMapper _mapper) {

        omero.util.IceMapper mapper = (omero.util.IceMapper) _mapper;
	$pojo.qualifiedDeclarationName target = new ${pojo.qualifiedDeclarationName}();
        mapper.store(this, target);
        if (!this.loaded) {
          target.setId( id == null ? null : id._null ? null : id.val );
          target.unload();
        } else {
###
### FOR PROPERTIES
###
#foreach($property in $pojo.propertyClosureForFullConstructor)
#set( $name = $pojo.getPropertyName($property))
#set( $javaType = $c2j.getJavaTypeName($property,false))##generics
#set( $shortType = $c2j.unqualify($javaType) )
#set( $FIELD = "${pojo.qualifiedDeclarationName}.${name.toUpperCase()}" )
##
## IF JAVA_TYPE -- mirrors above
#if( $pojo.qualifiedDeclarationName.startsWith("ome.model.internal.Permissions") )
##
       target = ome.util.Utils.toPermissions((Long)this.getPerm1())
##
#elseif( $javaType.startsWith("ome") )
##
       target.putAt($FIELD, ($javaType) mapper.reverse( (ome.api.ModelBased) this.get$name() ) );
##
#elseif( $javaType.startsWith("IObject") )
##
       target.set$name( (ome.model.IObject) mapper.reverse( (ome.api.ModelBased) this.get$name() ) );
##
#elseif( $javaType.startsWith("java.util.Set") || $javaType.startsWith("java.util.List") )
## If this is the case, we can't use the accessor and have to use a generated method
##
       if (this.${property.Name}Loaded) {
         target.putAt( $FIELD, mapper.reverse( this.get$name() ) );
       } else {
         target.putAt( $FIELD, null );
       }
##
#elseif( $javaType.startsWith("long"))
 ----------------> ERROR
#else
##
       target.set$name( this.get$name() );
##
#end
## END JAVA_TYPE
#end
###
### END PROPERTIES
###
      }
            return target;
    }


    public void unload(Ice.Current c) {
#foreach($property in $pojo.propertyClosureForFullConstructor)
#if(!$clazz.identifierProperty.equals($property))
#set( $name = $pojo.getPropertyName($property))
      this.set$name( null );
#end
#end	
      this.loaded = false;

    }




}
#end ############################################################## ONLY IF NOT ABSTRACT
#stop
 