#*
 *   $Id$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 *#
/*
 *   \$Id\$
 * 
 *   Copyright 2006 University of Dundee. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 * 
 */

// This file was generated by templates/ice_defs.vm

#set( $moduleStart = "module omero { module model { " )
#set( $moduleStop  = "}; };")
#set( $def = "CLASS_$pojo.declarationName.toUpperCase()" )
#ifndef $def
#define $def
#set( $include = '\#include' )
#set( $importModify = '.replaceAll(".*java.*","").replaceAll("import.*[.](.*?);","$include <$1.ice>") ' )
$include <omero.ice>
$include <IObject.ice>
$include <RTypes.ice>
#if( $pojo.isSubclass() )
#set( $parent = $pojo.extendsDeclaration.replaceFirst("extends.*ome.model..+?[.]","<") )
#set( $parent = "${parent}.ice>" )
$include $parent
$secondpassclassimports$importModify
#end

$moduleStart

#foreach($property in $pojo.allPropertiesIterator)
#set( $fulltype = $c2j.getJavaTypeName($property,false) )## , $generics)
#set( $type = $c2j.unqualify($fulltype) )
#set( $field = $property.name )
#set( $value = $property.value )
#set( $seqName = "${pojo.declarationName}${field.substring(0,1).toUpperCase()}${field.substring(1,$field.length())}Seq;" )
#if( $fulltype.contains("java.util.Set")||$fulltype.contains("java.util.List"))
#set( $genericType = $c2j.getJavaTypeName($property,true) )
#if(  $genericType.contains("ome.model") )
#set( $genericType = $genericType.replaceFirst(".*<ome.model..+?[.]","omero::model::").replaceFirst(">.*","") )
#end
#set( $genericTypeC = "${genericType.replaceAll('[.]','::')}")
        ["java:type:java.util.ArrayList"] sequence<$genericTypeC> $seqName
#elseif($fulltype.contains("byte[]"))
        sequence<byte> $seqName
#end
#end

### 
### Calculate inheritance
###
#set( $base = "extends omero::model::IObject" )
#if($pojo.isSubclass())
#set( $extendsDeclaration = $pojo.getExtendsDeclaration().replaceFirst("ome.model..+?[.]","omero::model::" ) ) ## TODO use #set
#else
#set( $extendsDeclaration = $base )
#end
###
###
###
class ${pojo.declarationName}
  $extendsDeclaration
{

#foreach($property in $pojo.allPropertiesIterator)## FOREACH
#if(!$clazz.identifierProperty.equals($property))## NOT ID PROPERTY
#set( $fulltype = $c2j.getJavaTypeName($property,false) ) ## , $generics)
#set( $type = $c2j.unqualify($fulltype) )
#set( $field = $property.name )
#set( $value = $property.value )
#set( $seqName = "${pojo.declarationName}${field.substring(0,1).toUpperCase()}${field.substring(1,$field.length())}Seq" )
##
	//  $fulltype $property.name;
##
#if($field.equals("version"))
#if($extendsDeclaration.equals($base))
	/// only for mutable superclasses
        omero::RInt version;
#else
        /// defined in superclass
#end
#elseif( $type == "String")
	omero::RString $field;
#elseif( $type == "Boolean" )
	omero::RBool $field;
#elseif ( $type == "Double" )
	omero::RDouble $field;
#elseif ( $type == "Float" )
	omero::RFloat $field;
#elseif( $type == "Integer")
	omero::RInt $field;
#elseif ( $type == "Long" )
	omero::RLong $field;
#elseif ($fulltype.startsWith("ome") ) ## Had to be moved before "*Map" rule
	omero::model::$type $field;
#elseif ($fulltype.equals("IObject"))  ## Special case of the previous
	omero::model::IObject $field;
#elseif ($type.endsWith("Map") )
	dictionary $field;
#elseif( $fulltype.contains("java.util.List") || $fulltype.contains("java.util.Set") || $fulltype.contains("[]")) 
	$seqName $field;
        bool ${field}Loaded;
#elseif ($fulltype.equals("java.sql.Timestamp"))
	omero::RTime $field;
#elseif ($fulltype.equals("long")) ## From Permissions
	long $field;
#else
	ERROR ===========> Unknown type ($fulltype)
#end
##
#end## NOT ID PROPERTY
#end## FOREACH
};

$moduleStop
#endif 
